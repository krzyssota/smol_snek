--  ROOT
entrypoints Program ;
Program.    Program ::= [Stmt] ;
terminator Stmt ";" ;

-- DECLARATIONs
FunDef.   Stmt ::= "def" Ident "(" [Arg] ")" Block ;
separator Arg  "," ;
VarDef.   Stmt ::= Ident "=" Expr ;

-- ARGUMENTs
Arg.        Arg  ::= Ident;

-- BLOCs
Block.      Block     ::= "{" [Stmt] "}" ;
LBlock.     LoopBlock ::= "{" [LoopStmt] "}" ;
terminator  LoopStmt      ";" ;
SBlock.     Stmt      ::= Block ;


-- LOOP STMTs
LStmt.      LoopStmt ::= Stmt ;
SBreak.     LoopStmt ::= "break" ;
SCont.      LoopStmt ::= "continue" ;

-- IFs
SIf.        Stmt     ::= "if"   Expr Stmt ;
SIfElse.    Stmt     ::= "if"   Expr Stmt ElseStmt ;
SIfElif.    Stmt     ::= "if"   Expr Stmt ElifStmt ;
SElifElse.  ElifStmt ::= "elif" Expr Stmt ElseStmt ;
SElifElif.  ElifStmt ::= "elif" Expr Stmt ElifStmt ;
SElse.      ElseStmt ::= "else" Stmt ;

-- OTHER STMTs
SWhile.     Stmt  ::= "while" Expr LoopBlock ;
SRange.     Stmt  ::= "for" Ident "in range(" Expr ")" LoopBlock;
SReturnE.   Stmt  ::= "return" Expr ;
Print.      Stmt  ::= "print" "(" [Expr] ")" ;
Expr.       Stmt  ::= Expr  ;

-- EXPRs
EVar.        Expr7 ::= Ident ;
EStr.        Expr7 ::= String ;
EInt.        Expr7 ::= Integer ;
ETrue.       Expr7 ::= "True" ;
EFalse.      Expr7 ::= "False" ;
ECall.       Expr7 ::= Ident "(" [Expr] ")" ;
ENot.        Expr6 ::= "not" Expr7 ;             -- not
ETern.       Expr5 ::= Expr5 "if" Expr6 "else" Expr6 ;
EOpAss.      Expr4 ::= Ident OpAss    Expr5 ;    -- +=, -=, =
EAriUns.     Expr3 ::= Expr3 OpAriUns Expr4 ;    -- unsafe (division by 0)
EAriS.       Expr2 ::= Expr2 OpAriS   Expr3 ;    -- safe
ECmp.        Expr1 ::= Expr1 OpCmp    Expr2 ;    -- >=, <=, ==, !=
ELog.        Expr  ::= Expr  OpLog    Expr1 ;    -- and, or

coercions Expr 8 ;
separator Expr "," ;

-- TYPEs AND OPERATORs
Mod.       OpAriUns ::= "%" ;
Div.       OpAriUns ::= "/" ;
Mul.       OpAriS   ::= "*" ;
Pls.       OpAriS   ::= "+" ;
Mns.       OpAriS   ::= "-" ;
Lt.        OpCmp    ::= "<" ;
Gt.        OpCmp    ::= ">" ;
Lte.       OpCmp    ::= "<=" ;
Gte.       OpCmp    ::= ">=" ;
Eq.        OpCmp    ::= "==" ;
Ne.        OpCmp    ::= "!=" ;
And.       OpLog    ::= "and" ;
Or.        OpLog    ::= "or" ;
Ass.       OpAss    ::= "=" ;
AddAss.    OpAss    ::= "+=" ;
SubAss.    OpAss    ::= "-=" ;

-- COMMENTs
comment    "#" ;
comment    "\"\"\"" "\"\"\"" ;
