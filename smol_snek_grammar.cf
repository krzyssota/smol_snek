--  ROOT
entrypoints Program ;
Program.    Program ::= [Stmt] ;
terminator Stmt ";" ;

-- DECLARATIONs
FunDef.     Stmt ::= "def" Ident "(" [Arg] ")" Block ;
separator   Arg  "," ;
--terminator  Stmt ";" ;

--VarDef.   Stmt ::= [Ident] "=" Expr ;
--separator nonempty Ident "=" ;
--VarDef.   Stmt ::= [Ident] Expr ;
--terminator nonempty Ident "=" ;
VarDef.     Stmt ::= Ident "=" Expr ;

-- ARGUMENTs
Arg.        Arg  ::= Ident;

-- BLOCs
--Block.      Block     ::= "{" [Stmt] "}" ;
--LBlock.     LoopBlock ::= "{" [LoopStmt] "}" ;
--terminator  LoopStmt  ";" ;
--SBlock.     Stmt      ::= Block ;


-- LOOP STMTs
--LStmt.      LoopStmt ::= Stmt ;
SBreak.     Stmt ::= "break" ;
SCont.      Stmt ::= "continue" ;
Block.      Block ::= "{" [Stmt] "}" ;
-- IFs
SIf.        Stmt     ::= "if"   Expr Block ;
SIfElse.    Stmt     ::= "if"   Expr Block ElseStmt ;
SIfElif.    Stmt     ::= "if"   Expr Block ElifStmt ;
SElifElse.  ElifStmt ::= "elif" Expr Block ElseStmt ;
SElifElif.  ElifStmt ::= "elif" Expr Block ElifStmt ;
SElse.      ElseStmt ::= "else" Block ;

-- OTHER STMTs
SWhile.     Stmt  ::= "while" Expr Block ;
--terminator  Stmt ";" ;
SRange.     Stmt  ::= "for" Ident "in range(" Expr ")" Block ;
SReturn.   Stmt  ::= "return" Expr ;
SPrint.      Stmt  ::= "print" "(" [Expr] ")" ;
SIOp.       Stmt  ::= Ident IOp Expr ;
Expr.       Stmt  ::= Expr  ;

-- EXPRs
EVar.        Expr3 ::= Ident ;
EStrLit.     Expr3 ::= String ;
EIntLit.     Expr3 ::= Integer ;
ETrueLit.    Expr3 ::= "True" ;
EFalseLit.   Expr3 ::= "False" ;
ECall.       Expr3 ::= Ident "(" [Expr] ")" ;
ENeg.        Expr2 ::= UnOp Expr3 ;
ETern.       Expr1 ::= Expr1 "if" Expr2 "else" Expr2 ;
--EOpAss.      Expr4 ::= Ident OpAss    Expr5 ;    -- +=, -=, =
ECompos.     Expr  ::= Expr BinOp Expr1 ;
--EAriUns.     Expr3 ::= Expr3 OpAriUns Expr4 ;    -- unsafe (division by 0)
--EAriS.       Expr2 ::= Expr2 OpAriS   Expr3 ;    -- safe
--ECmp.        Expr1 ::= Expr1 OpCmp    Expr2 ;    -- >=, <=, ==, !=
--ELog.        Expr  ::= Expr  OpLog    Expr1 ;    -- and, or

coercions Expr 3 ;
separator Expr "," ;

-- TYPEs AND OPERATORs
OpAriNeg.  UnOp     ::= "-" ;
OpLogNeg.  UnOp     ::= "not" ;
OpAriUns.  BinOp       ::= OpAriUns ;
OpAriS.    BinOp       ::= OpAriS ;
OpCmp.     BinOp       ::= OpCmp ;
OpLog.     BinOp       ::= OpLog ;
Mod.       OpAriUns ::= "%" ;
Div.       OpAriUns ::= "/" ;
Mul.       OpAriS   ::= "*" ;
Add.       OpAriS   ::= "+" ;
Sub.       OpAriS   ::= "-" ;
Lt.        OpCmp    ::= "<" ;
Gt.        OpCmp    ::= ">" ;
Lte.       OpCmp    ::= "<=" ;
Gte.       OpCmp    ::= ">=" ;
Eq.        OpCmp    ::= "==" ;
Ne.        OpCmp    ::= "!=" ;
And.       OpLog    ::= "and" ;
Or.        OpLog    ::= "or" ;
--Ass.       OpAss    ::= "=" ;
IAdd.    IOp    ::= "+=" ;
ISub.    IOp    ::= "-=" ;
IMul.    IOp    ::= "*=" ;
IDiv.    IOp    ::= "/=" ;
IMod.    IOp    ::= "%=" ;

-- COMMENTs
comment    "#" ;
comment    "\"\"\"" "\"\"\"" ;
